#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug  7 15:28:50 2019

@author: miri-o
"""

# Moran's index

import pysal
from pysal import lib
from pysal import explore
from pysal import viz
from pysal import model
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#
#f = pysal.lib.io.open(pysal.lib.examples.get_path("stl_hom.txt"))
#y = np.array(f.by_col['HR8893'])
#
#w = pysal.lib.io.open(pysal.lib.examples.get_path("stl.gal")).read()
#mi = pysal.explore.esda.Moran(y, w, two_tailed=False)
#print("%.3f"%mi.I)
#print(mi.EI)
#print("%.5f"%mi.p_norm)

### A simple example to show how moran's I works
# seed random number generator
np.random.seed(1)
# generate some integers
points = np.random.randint(10, size=(20,2))
plt.plot(points[:,0], points[:,1], 'ro', alpha = 0.5)
for i in range(points.shape[0]):
    plt.text(points[i,0], points[i,1], str(i))
    
W_knn = pysal.lib.weights.KNN(points, k=2, p=2)
W_DB = pysal.lib.weights.DistanceBand(points, 4, p=2, binary=True)
plt.show()

TH = [i for i in range(10)]
y = [points[j,0]+points[j,1] for j in range(20)]
mi_vec = []
for th in TH:
    W_DB = pysal.lib.weights.DistanceBand(points, th, p=2, binary=True)
    mi_val = pysal.explore.esda.Moran(y, W_DB, two_tailed=False)
    mi_vec.append(mi_val.I)

plt.figure()    
plt.plot(TH, mi_vec, 'ro--')
for i in range(len(TH)):
    plt.text(TH[i], mi_vec[i]+0.05, str("%.3f"%mi_vec[i]))
plt.title("Moran's Index as a funcion of distance")
plt.xlabel('Euclidian distance')
plt.ylabel("Moran's I")
plt.show()


## Now implement it on our data set
    
in_file = pd.read_csv('/media/miri-o/Documents/AA_triplets_with_embedding_and_clusters.csv')
data = pd.DataFrame(in_file)

props = ['CDR3_AA_GRAVY', 'CDR3_AA_BULK',
       'CDR3_AA_ALIPHATIC', 'CDR3_AA_POLARITY', 'CDR3_AA_CHARGE', 'CDR3_AA_BASIC', 'CDR3_AA_ACIDIC', 'CDR3_AA_AROMATIC']

points = data[['dim1','dim2']].values
plt.plot(data['dim1'], data['dim2'], 'd', markersize = 1 ,alpha = 0.5)
TH = [1,2.5,5, 7.5]
TH.extend([i for i in range(10, 160, 10)]) # different distances from minimal to maximal


#mi_val_df = pd.DataFrame(columns = props, index = TH)
#
#for th in TH:
#    print("Calculating Moran's Index for distance < {}".format(th))
#    W_DB = pysal.lib.weights.DistanceBand(points, th, p=2, binary=True)
#    print ('>> Weight matrix ready')
#    for prop in props:
#        mi_val = pysal.explore.esda.Moran(data[prop], W_DB, two_tailed=False)
#        print(">>> Moran's Index for d<{}, property: {} is {:.3f}, EI: {:.5f}, p_norm: {:.5f}".format(th, prop, mi_val.I, mi_val.EI, mi_val.p_norm))
#        mi_val_df.loc[th, prop] = mi_val.I
#        
#mi_val_df.to_csv('/media/miri-o/Documents/Moran_I_on_AA_triplets.csv')
#


plt.figure(figsize=(10,10))  
colors = iter(plt.cm.gist_ncar(np.linspace(0,1,10)))
for prop in props:
    c=next(colors)
    plt.plot(TH, mi_val_df.loc[:,[prop]], 'ro--',c=c)
#for i in range(len(TH)):
#    plt.text(TH[i], mi_vec[i]+0.05, str("%.3f"%mi_vec[i]))
plt.title("Moran's Index as a funcion of distance")
plt.xlabel('Euclidian distance')
plt.ylabel("Moran's I")
plt.legend(props)
plt.show()